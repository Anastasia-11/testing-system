@model CourseWork.Models.Test

@{
    Layout = "_Layout";
    var timestamp = new DateTimeOffset(Model.OpenTime).ToUnixTimeMilliseconds();
}

<!DOCTYPE html>

<html lang="ru">
<head>
    <link rel="stylesheet" href="~/css/timer.css"/>
    <title>Информация о тесте</title>
</head>
<body>
    @if (TempData["error-message"] != null)
    {
        <div class="alert alert-danger">@TempData["error-message"]</div>
    }
    @await Html.PartialAsync("TestInfoBriefPartial", Model)
    @if (DateTime.Now > Model.CloseTime)
    {
        <p><b>Тестирование завершено</b></p>
    }
    else
    {
        <div id="countdown" class="timer">
            <p>До начала тестирования осталось:</p>
            <div class="timer__items">
                <div class="timer__item timer__days">00</div>
                <div class="timer__item timer__hours">00</div>
                <div class="timer__item timer__minutes">00</div>
                <div class="timer__item timer__seconds">00</div>
            </div>
        </div>

        <div id="deadline-message" style="display: none;" class="deadline-message">
            <a class="btn btn-outline-primary" asp-area="" asp-controller="Test" asp-route-testId="@Model.Id" asp-action="Testing">Начать тестирование</a>
        </div>
    }
</body>
</html>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const deadline = new Date(@timestamp);
  let timerId = "countdown";
  
  function declensionNum(num, words) {
    return words[(num % 100 > 4 && num % 100 < 20) ? 2 : [2, 0, 1, 1, 1, 2][(num % 10 < 5) ? num % 10 : 5]];
  }
  
  function countdownTimer() {
    const diff = deadline - new Date();
    if (diff <= 0) {
      document.getElementById("countdown").style.display = "none";
      document.getElementById("deadline-message").style.display = "inline-block";
      clearInterval(timerId);
    }
    
    const days = diff > 0 ? Math.floor(diff / 1000 / 60 / 60 / 24) : 0;
    const hours = diff > 0 ? Math.floor(diff / 1000 / 60 / 60) % 24 : 0;
    const minutes = diff > 0 ? Math.floor(diff / 1000 / 60) % 60 : 0;
    const seconds = diff > 0 ? Math.floor(diff / 1000) % 60 : 0;
    
    $days.textContent = days < 10 ? '0' + days : days;
    $hours.textContent = hours < 10 ? '0' + hours : hours;
    $minutes.textContent = minutes < 10 ? '0' + minutes : minutes;
    $seconds.textContent = seconds < 10 ? '0' + seconds : seconds;
    
    $days.dataset.title = declensionNum(days, ['день', 'дня', 'дней']);
    $hours.dataset.title = declensionNum(hours, ['час', 'часа', 'часов']);
    $minutes.dataset.title = declensionNum(minutes, ['минута', 'минуты', 'минут']);
    $seconds.dataset.title = declensionNum(seconds, ['секунда', 'секунды', 'секунд']);
  }
  
  const $days = document.querySelector('.timer__days');
  const $hours = document.querySelector('.timer__hours');
  const $minutes = document.querySelector('.timer__minutes');
  const $seconds = document.querySelector('.timer__seconds');
  
  countdownTimer();
  timerId = setInterval(countdownTimer, 1000);
});
</script>